from std import io
from std.meta import reflect


class JSONObjectEncoder{T}:
    _writer: io.Writer

    def __new__(writer: io.Writer):
        return new(JSONObjectEncoder, _writer=writer)

    def encode(self, obj: T):
        self._writer.write(b"{")
        # How is it communicated that the return value is a compile time
        # constant, and iterating over it is unrolled and the values are also
        # compile time constants?
        first = False
        for field in reflect.get_fields{T}():
            if not first:
                self._writer.write(b",")
            else:
                first = True
            _JSONTextEncoder(writer=self._writer).encode(field.name)
            self._writer.write(b":")
            self._write_field{field}(obj)
        self._writer.write(b"}")

    def _writer_field{field}(self, obj: T):
        match field.type:
            as Text:
                _JSONTextEncoder(writer=self._writer).encode(
                    reflect.read_field{field}(obj)
                )
            as Int:
                _JSONIntegerEncoder(writer=self._writer).encode(
                    reflect.read_field{field}(obj)
                )
            as Bool:
                _JSONBoolEncoder(writer=self._writer).encode(
                    reflect.read_field{field}(obj)
                )
            as Option{K}:
                _JSONOptionEncoder{K}(writer=self._writer).encode(
                    reflect.read_field{field}(obj)
                )
            else:
                static_assert_unreachable()

class _JSONTextEncoder:
    writer: io.Writer

    def encode(self, t: Text):
        self.writer.write(b'"')
        # TODO: not technically correct.
        self.writer.write(t.encode("utf-8"))
        self.writer.write(b'"')


class _JSONIntegerEncoder:
    writer: io.Writer

    def encode(self, t: Int):
        self.writer.write(t.to_text().encode("utf-8"))


class _JSONBoolEncoder:
    writer: io.Writer

    def encode(self, b: Bool):
        if b:
            self.writer.write(b"true")
        else:
            self.writer.write(b"false")


class _JSONOptionEncoder{K}:
    writer: io.Writer

    def encode(self, o: Option{K}):
        match o:
            as Some(x):
                match K:
                    # TODO: duplication
                    as Text:
                        _JSONTextEncoder(writer=self._writer).encode(x)
                    as Int:
                        _JSONIntegerEncoder(writer=self._writer).encode(x)
                    as Bool:
                        _JSONBoolEncoder(writer=self._writer).encode(x)
                    else:
                        static_assert_unreachable()
            as None:
                self.writer.write(b"null")
